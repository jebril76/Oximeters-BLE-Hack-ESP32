/*
 * A BLE client example that is rich in capabilities.
 * There is a lot new capabilities implemented.
 * author unknown
 * updated by chegewara and Jebril
 */

#include "BLEDevice.h"
#include "WiFi.h"
#include "WiFiClient.h"
#include "ESP32_FTPClient.h"
#include "time.h"

// Replace the next variables with your SSID/Password combination and subscribe to esp32/spo2, esp32/bpm and esp32/pi
const char* ssid = "";
const char* password = "";
char ftp_server[] = "";
char ftp_user[] = "";
char ftp_pass[] = "";
char ftp_dir[] = "";
const long  gmtOffset = 1;  //You timezone relativ to GTM in hours( GTM+1 is 1.
const char* ntpServer = "pool.ntp.org";
// The remote service we wish to connect to.
static BLEUUID serviceUUID("0000af30-0000-1000-8000-00805f9b34fb");
static BLEUUID service2UUID("0000fff0-0000-1000-8000-00805f9b34fb");
// The characteristic of the remote service we are interested in.
static BLEUUID    charOximeterUUID("0000fff6-0000-1000-8000-00805f9b34fb");
static BLEUUID    charDeviceDataUUID("0000fff7-0000-1000-8000-00805f9b34fb");

const int ledPin = 2;
const int daylightOffset_sec = 3600;
struct tm timeinfo;
static boolean doConnect = false;
static boolean connected = false;
static boolean doScan = false;
static BLERemoteCharacteristic* pRemoteCharacteristicOximeter;
static BLERemoteCharacteristic* pRemoteCharacteristicDeviceData;
static BLEAdvertisedDevice* myDevice;
static unsigned int connectionTimeMs = 0;
char filename[21];
const int maxdata = 72000;
const int offdata = 1084;
unsigned char myData[maxdata];
int dataptr=offdata;
unsigned char myStore[4];
int lastread;

WiFiClient espClient;
ESP32_FTPClient ftp (ftp_server,ftp_user,ftp_pass, 5000, 2);

static void notifyCallback(
  BLERemoteCharacteristic* pBLERemoteCharacteristic,
  uint8_t* pData,
  size_t length,
  bool isNotify) {
/*  for (int i = 0; i < length; i++) {
    Serial.print(pData[i],HEX);
    Serial.print(" ");
  }
  Serial.println(); */
  if (pData[0] == 0xA0 && length == 12) {
    if (pData[5]==0x00) {
      myStore[0]=0xff;
      myStore[1]=0xff;
    }
    else {
      myStore[0]=((10*pData[5]) % 256);
      myStore[1]=floor(10*pData[5]/256);
    }
    if (pData[3]==0x00) {
      myStore[3]=0xff;    
    }
    else {
      myStore[3]=pData[3];
    }
    if (pData[1]==0x00) {
      myStore[2]=0x7f;    
    }
    else {
      myStore[2]=pData[1];
    }
  }
}

class MyClientCallback : public BLEClientCallbacks {
  void onConnect(BLEClient* pclient) {
    digitalWrite(ledPin, LOW);
    setup_wifi();
    gettime();
  }

  void onDisconnect(BLEClient* pclient) {
    connected = false;
    Serial.println("onDisconnect");
    ftpsave();
    WiFi.disconnect();
    digitalWrite(ledPin, HIGH);
  }
};

bool connectToServer() {
    Serial.print("Forming a connection to ");
    Serial.println(myDevice->getAddress().toString().c_str());
    
    BLEClient*  pClient  = BLEDevice::createClient();
    Serial.println(" - Created client");

    pClient->setClientCallbacks(new MyClientCallback());

    // Connect to the remove BLE Server.
    pClient->connect(myDevice);  // if you pass BLEAdvertisedDevice instead of address, it will be recognized type of peer device address (public or private)
    Serial.println(" - Connected to server");
    pClient->setMTU(517);
    
    // Obtain a reference to the service we are after in the remote BLE server.
    BLERemoteService* pRemoteService = pClient->getService(service2UUID);
    if (pRemoteService == nullptr) {
      Serial.print("Failed to find our service UUID: ");
      Serial.println(service2UUID.toString().c_str());
      pClient->disconnect();
      return false;
    }
    Serial.println(" - Found our service");

    // Obtain a reference to the characteristic in the service of the remote BLE server.
    pRemoteCharacteristicDeviceData = pRemoteService->getCharacteristic(charDeviceDataUUID);
    if (pRemoteCharacteristicDeviceData == nullptr) {
      Serial.print("Failed to find our characteristic UUID: ");
      Serial.println(charDeviceDataUUID.toString().c_str());
      pClient->disconnect();
      return false;
    }
    Serial.print(" - Found our characteristic ");
    Serial.println(charDeviceDataUUID.toString().c_str());

    // Read the value of the characteristic.
    if(pRemoteCharacteristicDeviceData->canRead()) {
      Serial.println(" - Our characteristic can be read.");
      std::string value = pRemoteCharacteristicDeviceData->readValue();
      byte buf[64]= {0};
      memcpy(buf,value.c_str(),value.length());
      Serial.print("The characteristic value was: (0x) ");
      for (int i = 0; i < value.length(); i++) {
        Serial.print(buf[i],HEX);
        Serial.print(" ");
      }
      Serial.println();
      Serial.println("Past value                  : (0x) 94 83 DB 50 A0 00");
    }
    else {
      Serial.println(" - Our characteristic cannot be read.");
    }

    // Obtain a reference to the characteristic in the service of the remote BLE server.
    pRemoteCharacteristicOximeter = pRemoteService->getCharacteristic(charOximeterUUID);
    if (pRemoteCharacteristicOximeter == nullptr) {
      Serial.print("Failed to find our characteristic UUID: ");
      Serial.println(charOximeterUUID.toString().c_str());
      pClient->disconnect();
      return false;
    }
    Serial.print(" - Found our characteristic ");
    Serial.println(charOximeterUUID.toString().c_str());

    // Read the value of the characteristic.
    if(pRemoteCharacteristicOximeter->canRead()) {
      Serial.println(" - Our characteristic can be read.");
      std::string value = pRemoteCharacteristicDeviceData->readValue();
      byte buf[64]= {0};
      memcpy(buf,value.c_str(),value.length());
      Serial.print("The characteristic value was: ");
      for (int i = 0; i < value.length(); i++) {
        Serial.print(buf[i],HEX);
        Serial.print(" ");
      }
      Serial.println();
    }
    else {
      Serial.println(" - Our characteristic cannot be read.");
    }

    if(pRemoteCharacteristicOximeter->canNotify()) {
      Serial.println(" - Our characteristic can notify us, registering notification callback.");
      pRemoteCharacteristicOximeter->registerForNotify(notifyCallback, true);
    }
    else {
      Serial.println(" - Our characteristic cannot notify us.");
    }

    if (pRemoteCharacteristicOximeter->canIndicate() == true) {
      Serial.println(" - Our characteristic can indicate.");
    } else {
      Serial.println(" - Our characteristic cannot indicate.");
    }

    // needed to start the notifications:
    pRemoteCharacteristicOximeter->readValue();
    const uint8_t notificationOn[] = {0x1, 0x0};
    pRemoteCharacteristicOximeter->getDescriptor(BLEUUID((uint16_t)0x2902))->writeValue((uint8_t*)notificationOn, 2, true);

    connected = true;
    return true;
}
// Scan for BLE servers and find the first one that advertises the service we are looking for.
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
// Called for each advertising BLE server.
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    Serial.print("\nBLE Advertised Device found: ");
    Serial.println(advertisedDevice.toString().c_str());

    Serial.print("Address: ");
    Serial.println(advertisedDevice.getAddress().toString().c_str());
    if (advertisedDevice.haveServiceUUID()) {
      Serial.println("Device has Service UUID");
      if (advertisedDevice.isAdvertisingService(serviceUUID)) {Serial.println("Device is advertising our Service UUID");}
      else {Serial.println("Device is not advertising our Service UUID");}
    }
    else {Serial.println("Device does not have Service UUID");}
    
    // We have found a device, let us now see if it contains the service we are looking for.
    if (advertisedDevice.haveServiceUUID() && advertisedDevice.isAdvertisingService(serviceUUID)) {

      BLEDevice::getScan()->stop();
      myDevice = new BLEAdvertisedDevice(advertisedDevice);
      doConnect = true;
      doScan = true;

    } // Found our server
  } // onResult
}; // MyAdvertisedDeviceCallbacks

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  configTime(gmtOffset*3600, daylightOffset_sec, ntpServer);
}

void ftpsave() {
  myData[1056]= (timeinfo.tm_year+1900) % 256;
  myData[1057]= floor((timeinfo.tm_year+1900)/256);
  myData[1060]= timeinfo.tm_mon+1;
  myData[1064]= timeinfo.tm_mday;
  myData[1068]= timeinfo.tm_hour;
  myData[1072]= timeinfo.tm_min;
  myData[1076]= timeinfo.tm_sec;
  myData[1080]= ((dataptr-offdata)/4) % 256;
  myData[1081]= floor(((dataptr-offdata)/4)/256);
  setup_wifi();
  ftp.OpenConnection();
  ftp.ChangeWorkDir(ftp_dir);
  // Create the file new and write a string into it
  ftp.InitFile("Type I");
  ftp.NewFile(filename);
  ftp.WriteData(myData, dataptr);
  ftp.CloseFile();
  ftp.CloseConnection();
}

void gettime() {
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
  }
  WiFi.disconnect();
  strftime(filename, sizeof(filename), "%Y%m%d_%H%M%S.spo2", &timeinfo);
  lastread = millis();
  dataptr = offdata; 
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, HIGH);
  setup_wifi();
  connectionTimeMs = millis();
  Serial.println("Starting Arduino BLE Client application...");
  BLEDevice::init("");
  // Retrieve a Scanner and set the callback we want to use to be informed when we
  // have detected a new device.  Specify that we want active scanning and start the
  // scan to run for 5 seconds.
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setInterval(1349);
  pBLEScan->setWindow(449);
  pBLEScan->setActiveScan(true);
  pBLEScan->start(5, false);
  myData[0]= 0x58;
  myData[1]= 0x03;
  myData[4]= 0x01;
} // End of setup.


// This is the Arduino main loop function.
void loop() {
  if (millis() > lastread + 1000) {
    lastread = millis();
    // If the flag "doConnect" is true then we have scanned for and found the desired
    // BLE Server with which we wish to connect.  Now we connect to it.  Once we are
    // connected we set the connected flag to be true.
    if (doConnect == true) {
      if (connectToServer()) {
        Serial.println("We are now connected to the BLE Server.");
      } else {
        Serial.println("We have failed to connect to the server; there is nothin more we will do.");
      }
      doConnect = false;
    }
  
    // If we are connected to a peer BLE Server, update the characteristic each time we are reached
    // with the current time since boot.
  /*  if (connected) {
      if (pRemoteCharacteristicOximeter->canWrite()) {
  //      Set the characteristic's value to be the array of bytes that is actually a string.
  //      String newValue = "Time since boot: " + String(millis()/1000);
  //      Serial.println("Setting new characteristic value to \"" + newValue + "\"");
  //      pRemoteCharacteristicOximeter->writeValue(newValue.c_str(), newValue.length());
      }
    }
  */  
    if (!connected) {
      if (doScan) {
        BLEDevice::getScan()->start(0);  // this is just an example to start scan after disconnect, most likely there is better way to do it in arduino
      }
      else { // enable connects if no device was found on first boot
        if (millis() > connectionTimeMs + 6000) {
          Serial.println("Enabling scanning.");
          doScan = true;
        }
      }
    }
    else {
      digitalWrite(ledPin, LOW);
    }
    myData[dataptr++]=myStore[0];
    myData[dataptr++]=myStore[1];
    myData[dataptr++]=myStore[2];
    myData[dataptr++]=myStore[3]; 
    if (maxdata < dataptr + 4) {
      ftpsave();
      gettime();
    }
  }
} // End of loop
